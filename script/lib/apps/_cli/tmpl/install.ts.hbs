#!/usr/bin/env -S deno run --allow-env --allow-net=deno.land --allow-read --allow-write --allow-run

import { $, $dirname, env, invariant, osInvariant } from "../../mod.ts";
import { constants, ghReleaseLatestInfo, InstallerMeta, streamDownload } from "../_cli/pamkit.ts";

osInvariant();

const dotAppPath = $.path.join($dirname(import.meta.url), constants.appArtifactsDir);
await $.fs.ensureDir(dotAppPath);

// =====
// only install if not yet installed, e.g.
// =====
const notInstalled = typeof (await $.which("somecli")) === "undefined";
if (notInstalled) {
  if (env.OS === "darwin") {
    // =====
    // install mac, e.g.
    // =====
    // await $`brew install somecli`.env({ HOMEBREW_NO_ANALYTICS: "1" });
  } else {
    // =====
    // install linux, e.g.
    // =====
    // const releaseInfoPath = $.path.join(dotAppPath, constants.ghReleaseInfoName);
    // const debInstallerPath = $.path.join(dotAppPath, "somecli.deb");

    // const releaseInfo = await ghReleaseLatestInfo("someorg", "somecli");
    // await Deno.writeTextFile(releaseInfoPath, JSON.stringify(releaseInfo, null, 2));

    // const { assets, tag_name } = releaseInfo;
    // const latestVersion = tag_name.split("v")[1] ?? "0.0.0";
    // const targetName = `somecli_${latestVersion}_amd64.deb`;
    // const targetAsset = assets.find((a) => a.name === targetName);

    // invariant(typeof targetAsset !== "undefined", "no suitable installation target found");

    // await streamDownload(targetAsset.browser_download_url, debInstallerPath);

    // await $`sudo apt install -y ${debInstallerPath}`;
  }
}

// =====
// check version, e.g.
// =====
const versionOutput = await $`somecli --version`.text(); // v0.22.1
const version = versionOutput.split("v")[1];

// =====
// save initial installer meta, e.g.
// =====
const meta: InstallerMeta = {
  name: $.path.basename($dirname(import.meta.url)),
  path: $dirname(import.meta.url),
  type: env.OS === "darwin" ? "installed-managed" : "installed-manual",
  version,
  lastCheck: Date.now(),
};
const metaManifestPath = $.path.join(dotAppPath, constants.metaManifestName);

await Deno.writeTextFile(metaManifestPath, JSON.stringify(meta, null, 2));
