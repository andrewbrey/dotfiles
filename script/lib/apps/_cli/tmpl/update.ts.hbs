#!/usr/bin/env -S deno run --allow-env --allow-net --allow-read --allow-write --allow-run

import { $, $dirname, dedent, env, invariant, osInvariant } from "../../mod.ts";
import {
	constants,
	getInstallerMetas,
	ghReleaseLatestInfo,
	streamDownload
} from "../_cli/pamkit.ts";

osInvariant();

// $.logGroup(() => {
//   $.logWarn(
//     "warn:",
//     dedent(`
// 			installation is managed; skipping manual update

// 		`),
//   );
// });

const dotAppPath = $.path.join($dirname(import.meta.url), constants.appArtifactsDir);
await $.fs.ensureDir(dotAppPath);

const [meta] = await getInstallerMetas(new Set([$dirname(import.meta.url, true)]));

const installed = typeof (await $.which("somecli")) !== "undefined";
if (installed) {
  if (env.OS === "darwin") {
    // $.logGroup(() => {
    //   $.logWarn(
    //     "warn:",
    //     dedent(`
    // 			installation is managed; skipping manual update

    // 		`),
    //   );
    // });
  } else {
    // const releaseInfoPath = $.path.join(dotAppPath, constants.ghReleaseInfoName);
    // const debInstallerPath = $.path.join(dotAppPath, "somecli.deb");

    // const releaseInfo = await ghReleaseLatestInfo("someorg", "somecli");
    // await Deno.writeTextFile(releaseInfoPath, JSON.stringify(releaseInfo, null, 2));

    // const { assets, tag_name } = releaseInfo;
    // const latestVersion = tag_name.split("v")?.at(1) ?? "0.0.0";
    // const targetName = `somecli_${latestVersion}_amd64.deb`;
    // const targetAsset = assets.find((a) => a.name === targetName);

    // invariant(typeof targetAsset !== "undefined", "no suitable installation target found");

    // await streamDownload(targetAsset.browser_download_url, debInstallerPath);

    // await $`sudo apt install -y ${debInstallerPath}`;

    // =====
    // update last check time, e.g.
    // =====
    meta.lastCheck = Date.now();
  }
}

const versionOutput = await $`somecli --version`.text(); // somecli 0.22.1 (e5d9579)
const version = versionOutput.split(" ")?.at(1) ?? "";

meta.version = version;

const metaManifestPath = $.path.join(dotAppPath, constants.metaManifestName);
await Deno.writeTextFile(metaManifestPath, JSON.stringify(meta, null, 2));
