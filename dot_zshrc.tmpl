#!/usr/bin/env zsh

ZSH_DISABLE_COMPFIX=true

# automatically run `zgenom reset` if we modify our .zshrc
ZGEN_RESET_ON_CHANGE=("${HOME}/.zshrc")

# load zgenom
source "${HOME}/.zgenom/zgenom.zsh"

# if the init script doesn't exist
if ! zgenom saved; then

	# oh-my-zsh
	zgenom oh-my-zsh

	# oh my zsh plugins
	zgenom oh-my-zsh plugins/git
	zgenom oh-my-zsh plugins/docker
	zgenom oh-my-zsh plugins/yarn

	# other plugins
	zgenom loadall <<EOPLUGINS
    {{ .standard_dirs.dot_dots | quote  }}/completions
EOPLUGINS

	# generate the init script from plugins above
	zgenom save
fi

# automatically upgrade oh-my-zsh without asking
DISABLE_UPDATE_PROMPT=true

# load shell dotfiles
for file in {{ .standard_dirs.dot_dots | quote  }}/.{secrets,exports,functions,aliases,extra}; do
	[[ -r "${file}" ]] && [[ -f "${file}" ]] && source "${file}"
done
unset file

{{ if .is_mac -}}
# enable homebrew shell usage
eval "$(/opt/homebrew/bin/brew shellenv)"
{{- end }}

# use direnv for .env's if available
if type direnv &>/dev/null; then
	eval "$(direnv hook zsh)"
fi

# run "on boot" script
if type deno &>/dev/null; then
	if type chezmoi &>/dev/null; then
		on_boot_main="script/lib/boot/main.ts"
		on_boot_root="$(chezmoi source-path)"
		[[ -n "${DOTFILES_SRC_PATH_OVERRIDE}" ]] && on_boot_root="${DOTFILES_SRC_PATH_OVERRIDE}"

		# run in subshell to silence output and execute in background
		("${on_boot_root}/${on_boot_main}" &>/dev/null &)

		unset on_boot_main
		unset on_boot_root
	fi
fi

# use starship for a nice looking prompt
if ! type starship &>/dev/null; then
	echo ""
	echo "==============================================================="
	echo "Hey! Go run the starship prompt install script in your dotfiles"
	echo "==============================================================="
else
	eval "$(starship init zsh)"
fi
